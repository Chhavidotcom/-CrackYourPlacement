/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {TreeNode} target
 * @param {number} k
 * @return {number[]}
 */
var distanceK = function(root, target, k) {
const parentMap = new Map();
    buildParentMap(root, null, parentMap);
    
    const result = [];
    const visited = new Set();
    const queue = [target];
    visited.add(target);
    
    let currentDistance = 0;
    
    while (queue.length > 0) {
        if (currentDistance === k) {
            return queue.map(node => node.val);
        }
        
        const levelSize = queue.length;
        for (let i = 0; i < levelSize; i++) {
            const node = queue.shift();
            
            if (node.left && !visited.has(node.left)) {
                visited.add(node.left);
                queue.push(node.left);
            }
            
            if (node.right && !visited.has(node.right)) {
                visited.add(node.right);
                queue.push(node.right);
            }
            
            if (parentMap.get(node) && !visited.has(parentMap.get(node))) {
                visited.add(parentMap.get(node));
                queue.push(parentMap.get(node));
            }
        }
        
        currentDistance++;
    }
    
    return result;
};

/**
 * Builds a map of each node to its parent.
 * @param {TreeNode} node
 * @param {TreeNode} parent
 * @param {Map<TreeNode, TreeNode>} parentMap
 */
function buildParentMap(node, parent, parentMap) {
    if (node) {
        parentMap.set(node, parent);
        buildParentMap(node.left, node, parentMap);
        buildParentMap(node.right, node, parentMap);
    }
};
