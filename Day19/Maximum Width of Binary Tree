/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var widthOfBinaryTree = function(root) {
    if (!root) return 0;

    let maxWidth = 0;
    let queue = [{ node: root, index: 0 }]; // Start with the root node and index 0

    while (queue.length > 0) {
        let levelSize = queue.length;
        let { index: firstIndex } = queue[0]; // Get the index of the first node in the level
        let lastIndex = firstIndex; // Initialize lastIndex to the first node's index for this level

        for (let i = 0; i < levelSize; i++) {
            let { node, index } = queue.shift(); // Dequeue the current node and its index

            // Update the lastIndex for the current level
            lastIndex = index;

            // Enqueue left child if it exists
            if (node.left) {
                queue.push({ node: node.left, index: 2 * index });
            }

            // Enqueue right child if it exists
            if (node.right) {
                queue.push({ node: node.right, index: 2 * index + 1 });
            }
        }

        // Calculate width of the current level and update maxWidth
        maxWidth = Math.max(maxWidth, lastIndex - firstIndex + 1);
    }

    return maxWidth;
};
