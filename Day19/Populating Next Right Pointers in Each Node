/**
 * // Definition for a _Node.
 * function _Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
 *    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : right;
 *    this.next = next === undefined ? null : next;
 * };
 */

/**
 * @param {_Node} root
 * @return {_Node}
 */
var connect = function(root) {
    if (!root) return root;
    
    let queue = [root];
    
    while (queue.length > 0) {
        let size = queue.length;
        let prevNode = null;
        
        for (let i = 0; i < size; i++) {
            let node = queue.shift(); // Get the front node of the queue
            
            if (prevNode) {
                prevNode.next = node; // Connect previous node's next to current node
            }
            prevNode = node; // Update previous node to current node
            
            // Add child nodes to the queue
            if (node.left) queue.push(node.left);
            if (node.right) queue.push(node.right);
        }
        
        // Ensure the last node at each level points to null
        if (prevNode) {
            prevNode.next = null;
        }
    }
    
    return root;
};
