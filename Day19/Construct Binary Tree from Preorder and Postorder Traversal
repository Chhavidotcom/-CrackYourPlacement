/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {number[]} preorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var constructFromPrePost = function(preorder, postorder) {
     function construct(preStart, preEnd, postStart, postEnd) {
        if (preStart > preEnd || postStart > postEnd) return null;
        if (preStart === preEnd) return new TreeNode(preorder[preStart]);

        let rootVal = preorder[preStart];
        let root = new TreeNode(rootVal);
        
        let leftRootVal = preorder[preStart + 1];
        let leftSubtreeSize = postorder.indexOf(leftRootVal) - postStart + 1;

        root.left = construct(preStart + 1, preStart + leftSubtreeSize, postStart, postStart + leftSubtreeSize - 1);
        root.right = construct(preStart + leftSubtreeSize + 1, preEnd, postStart + leftSubtreeSize, postEnd - 1);
        
        return root;
    }
    
    return construct(0, preorder.length - 1, 0, postorder.length - 1);
};
