/**
 * @param {number} n
 * @return {number}
 */
var numTrees = function(n) {
     const dp = new Array(n + 1).fill(0);
    dp[0] = 1; // Base case: There's 1 BST for 0 nodes (empty tree)
    dp[1] = 1; // Base case: There's 1 BST for 1 node
    
    // Fill dp array using the recurrence relation
    for (let i = 2; i <= n; i++) {
        for (let j = 0; j < i; j++) {
            dp[i] += dp[j] * dp[i - 1 - j];
        }
    }
    
    return dp[n];
};
