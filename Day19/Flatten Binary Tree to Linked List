/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {void} Do not return anything, modify root in-place instead.
 */
var flatten = function(root) {
    function flattenTree(node) {
        if (!node) return null;

        // If the node is a leaf, just return it
        if (!node.left && !node.right) return node;

        // Flatten left and right subtrees
        let leftTail = flattenTree(node.left);
        let rightTail = flattenTree(node.right);

        // If there is a left subtree, we need to rearrange the pointers
        if (leftTail) {
            // Connect the rightmost node of the left subtree to the right subtree
            leftTail.right = node.right;
            // Move the left subtree to the right
            node.right = node.left;
            node.left = null; // Set the left child to null
        }

        // Return the rightmost node of the flattened tree
        return rightTail ? rightTail : leftTail;
    }
    
    flattenTree(root);
};
