/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {void} Do not return anything, modify head in-place instead.
 */
var reorderList = function(head) {
    if (!head || !head.next || !head.next.next) return;
    let slow = head;
    let fast = head;
    while (fast && fast.next) {
        slow = slow.next;
        fast = fast.next.next;
    }
    let first = head;
    let second = slow.next;
    slow.next = null; 
    second = reverseList(second);
    mergeLists(first, second);
};
function reverseList(head) {
    let prev = null;
    let curr = head;
    while (curr) {
        let next = curr.next;
        curr.next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
function mergeLists(l1, l2) {
    while (l1 && l2) {
        let l1Next = l1.next;
        let l2Next = l2.next;
        
        l1.next = l2;
        l1 = l1Next;
        
        l2.next = l1;
        l2 = l2Next;
    }

    
};
