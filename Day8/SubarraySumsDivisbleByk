/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var subarraysDivByK = function(nums, k) {
    let count = 0; // To keep track of the number of valid subarrays
    let prefixSum = 0; // To keep track of the current prefix sum
    let remainderCount = new Map(); // To store counts of remainders

    // Initialize the map with remainder 0 having count 1
    remainderCount.set(0, 1);

    for (let num of nums) {
        prefixSum += num; // Update prefix sum
        let remainder = ((prefixSum % k) + k) % k; // Compute remainder and handle negative remainders

        // If the remainder has been seen before, it means we have found subarrays with sum divisible by k
        if (remainderCount.has(remainder)) {
            count += remainderCount.get(remainder);
        }

        // Update the count of this remainder in the map
        remainderCount.set(remainder, (remainderCount.get(remainder) || 0) + 1);
    }

    return count;
};
