/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxDistance = function(grid) {
let n = grid.length;
    let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
    let queue = [];
    let distance = Array.from({ length: n }, () => Array(n).fill(-1));
    
    // Initialize the queue with all land cells and their distance as 0
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (grid[i][j] === 1) {
                queue.push([i, j]);
                distance[i][j] = 0;
            }
        }
    }
    
    // If there are no land or no water cells, return -1
    if (queue.length === 0 || queue.length === n * n) return -1;

    // Perform BFS
    while (queue.length > 0) {
        let [x, y] = queue.shift();
        for (let [dx, dy] of directions) {
            let nx = x + dx;
            let ny = y + dy;
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && distance[nx][ny] === -1) {
                distance[nx][ny] = distance[x][y] + 1;
                queue.push([nx, ny]);
            }
        }
    }
    
    // Find the maximum distance
    let maxDist = -1;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (grid[i][j] === 0) {
                maxDist = Math.max(maxDist, distance[i][j]);
            }
        }
    }
    
    return maxDist;
};
