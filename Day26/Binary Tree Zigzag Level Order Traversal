/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[][]}
 */
var zigzagLevelOrder = function(root) {
    
    if (!root) return [];

    const result = [];
    const queue = [root];
    let level = 0; // 0 for left-to-right, 1 for right-to-left

    while (queue.length > 0) {
        const levelSize = queue.length;
        const currentLevel = [];
        
        for (let i = 0; i < levelSize; i++) {
            const node = queue.shift(); // Dequeue the front node

            // Add the node value to the current level list
            currentLevel.push(node.val);

            // Enqueue left and right children if they exist
            if (node.left) queue.push(node.left);
            if (node.right) queue.push(node.right);
        }

        // Reverse the level list if the current level is right-to-left
        if (level % 2 === 1) {
            currentLevel.reverse();
        }

        // Add the current level list to the result
        result.push(currentLevel);
        level++; // Alternate the level direction
    }

    return result;
};
