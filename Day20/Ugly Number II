/**
 * @param {number} n
 * @return {number}
 */
var nthUglyNumber = function(n) {
     const heap = new MinHeap();
    const seen = new Set();

    // Start with the smallest ugly number
    heap.push(1);
    seen.add(1);

    let uglyNumber = 1;
    for (let i = 0; i < n; i++) {
        uglyNumber = heap.pop();
        
        // Generate new ugly numbers by multiplying with 2, 3, and 5
        for (const factor of [2, 3, 5]) {
            const newUgly = uglyNumber * factor;
            if (!seen.has(newUgly)) {
                seen.add(newUgly);
                heap.push(newUgly);
            }
        }
    }
    
    return uglyNumber;
};

// Helper class to implement a min-heap
class MinHeap {
    constructor() {
        this.heap = [];
    }

    // Method to get the size of the heap
    size() {
        return this.heap.length;
    }

    // Method to push a value into the heap
    push(value) {
        this.heap.push(value);
        this._heapifyUp(this.size() - 1);
    }

    // Method to pop the minimum value (root) from the heap
    pop() {
        if (this.size() === 0) return null;
        const min = this.heap[0];
        const last = this.heap.pop();
        if (this.size() > 0) {
            this.heap[0] = last;
            this._heapifyDown(0);
        }
        return min;
    }

    // Heapify up to maintain heap property
    _heapifyUp(index) {
        const parentIndex = Math.floor((index - 1) / 2);
        if (index > 0 && this.heap[index] < this.heap[parentIndex]) {
            [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];
            this._heapifyUp(parentIndex);
        }
    }

    // Heapify down to maintain heap property
    _heapifyDown(index) {
        const size = this.size();
        const leftChildIndex = 2 * index + 1;
        const rightChildIndex = 2 * index + 2;
        let smallest = index;

        if (leftChildIndex < size && this.heap[leftChildIndex] < this.heap[smallest]) {
            smallest = leftChildIndex;
        }
        if (rightChildIndex < size && this.heap[rightChildIndex] < this.heap[smallest]) {
            smallest = rightChildIndex;
        }
        if (smallest !== index) {
            [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];
            this._heapifyDown(smallest);
        }
    }
};
