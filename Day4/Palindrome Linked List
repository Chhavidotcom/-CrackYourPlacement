/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {

    if (!head || !head.next) return true;

    
    function reverseList(head) {
        let prev = null;
        let cur = head;
        while (cur) {
            let next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }

    let slow = head;
    let fast = head;


    while (fast && fast.next) {
        slow = slow.next;
        fast = fast.next.next;
    }

  
    let secondHalf = reverseList(slow);
    let firstHalf = head;

  
    while (secondHalf) {
        if (firstHalf.val !== secondHalf.val) {
            return false;
        }
        firstHalf = firstHalf.next;
        secondHalf = secondHalf.next;
    }

    return true;
};


function push(head_ref, new_data) {
    let new_Node = new ListNode(new_data);
    new_Node.next = head_ref[0];
    head_ref[0] = new_Node;
}


function testPalindrome(values) {
    let head = [null];
    for (let val of values) {
        push(head, val);
    }
    console.log(isPalindrome(head[0])); 
}


