//{ Driver Code Starts
//Initial Template for javascript

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

class Node{
    constructor(data){
        this.data = data;
        this.next = null;
    }
}

function printlist(head){
    let current = head; 
    let s='';
    while (current !== null)
    {
        s+=current.data+" ";
        current = current.next;
    }
    console.log(s);
}


function main() {
    let t = parseInt(readLine());
    let i = 0;
    for(;i<t;i++)
    {
        let n = parseInt(readLine());
        let input_ar1 = readLine().split(' ').map(x=>parseInt(x));
        let head1 = new Node(input_ar1[0]);
        let tail1 = head1;
        for(let i=1;i<n;i++){
            tail1.next = new Node(input_ar1[i]);
            tail1 = tail1.next;
        }
        let obj = new Solution();
        let res = obj.compute(head1);
        printlist(res);
    }
}



// } Driver Code Ends


//User function Template for javascript

/**
 * @param {Node} head
 * @returns {Node}
*/

/*
class Node{
    constructor(data){
        this.data = data;
        this.next = null;
    }
}
*/

class Solution {
    
    compute(head)
    {
        //your code here
        const reverseList = (head) => {
      let prev = null;
      let current = head;
      while (current !== null) {
        let nextNode = current.next;
        current.next = prev;
        prev = current;
        current = nextNode;
      }
      return prev;
    };

    const printList = (head) => {
      let result = '';
      while (head !== null) {
        result += head.data + ' ';
        head = head.next;
      }
      console.log(result.trim());
    };

    if (head === null) return null;

    head = reverseList(head);

 
    let maxValue = -Infinity;
    let dummy = new Node(0);
    let newTail = dummy;

    let current = head;
    while (current !== null) {
      if (current.data >= maxValue) {
        maxValue = current.data;
        newTail.next = current;
        newTail = newTail.next;
      }
      current = current.next;
    }
    newTail.next = null; 
    return reverseList(dummy.next);
    }
}
