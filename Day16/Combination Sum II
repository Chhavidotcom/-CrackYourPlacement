candidates.sort((a, b) => a - b);

    // Initialize result array to store the unique combinations
    const result = [];

    // Define the backtracking function
    const backtrack = (start, target, path) => {
        // If target is 0, we found a valid combination
        if (target === 0) {
            result.push([...path]);
            return;
        }
        
        // Explore further only if target is positive
        for (let i = start; i < candidates.length; i++) {
            // Skip duplicates
            if (i > start && candidates[i] === candidates[i - 1]) continue;
            
            // If the candidate is greater than the target, no need to continue
            if (candidates[i] > target) break;
            
            // Include the candidate and explore further
            path.push(candidates[i]);
            backtrack(i + 1, target - candidates[i], path);
            
            // Backtrack by removing the last added candidate
            path.pop();
        }
    };

    // Start the backtracking with an empty path
    backtrack(0, target, []);

    return result;
